name: "CI"
on: ["push", "pull_request"]
env:
  WXWIDGETS_VERSION: 3.1.4
  OTP_VERSION: 25.0.4
  ELIXIR_VERSION: 1.13.4
  DOCKER_BUILDKIT: 0

jobs:
  windows:
    runs-on: windows-2019
    defaults:
      run:
        shell: wsl-bash {0}
    name: Build Erlang/OTP (Windows)
    steps:
    - uses: Vampire/setup-wsl@v2
      with:
        distribution: Ubuntu-18.04

    - name: Install WSL dependencies
      run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip

    - name: Install openssl
      shell: cmd
      run: |
        choco install openssl --version=1.1.1.2100
        move "c:\\Program Files\\OpenSSL" "c:\\OpenSSL-Win64"

    - name: Download wxWidgets
      run: |
        git clone https://github.com/wxWidgets/wxWidgets.git
        cd wxWidgets
        git checkout v${{ env.WXWIDGETS_VERSION }} --recurse-submodules
        git submodule update --init
        # sed -i -r -e 's/wxUSE_POSTSCRIPT +0/wxUSE_POSTSCRIPT 1/' include/wx/msvc/setup.h
        # sed -i -r -e 's/wxUSE_WEBVIEW_EDGE +0/wxUSE_WEBVIEW_EDGE 1/' include/wx/msvc/setup.h

    - name: Install WebView2
      shell: cmd
      run: |
        cd wxWidgets\\3rdparty
        nuget install Microsoft.Web.WebView2 -Version 1.0.705.50 -Source https://api.nuget.org/v3/index.json
        rename Microsoft.Web.WebView2.1.0.705.50 webview2

    - name: Build wxWidgets
      shell: cmd
      run: |
        cd wxWidgets\\build\\msw
        call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\Auxiliary\\Build\\vcvars64.bat"
        nmake TARGET_CPU=amd64 BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc

    - name: Compile Erlang
      run: |
        mkdir -p /mnt/c/opt/local64/pgm/
        cp -R wxWidgets /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}
        wget https://github.com/erlang/otp/releases/download/OTP-${{ env.OTP_VERSION }}/otp_src_${{ env.OTP_VERSION }}.tar.gz
        tar -xzf ./otp_src_${{ env.OTP_VERSION }}.tar.gz
        mv otp_src_${{ env.OTP_VERSION }} otp
        cd otp
        export ERL_TOP=`pwd`
        export MAKEFLAGS=-j$(($(nproc) + 2))
        export ERLC_USE_SERVER=true
        export ERTS_SKIP_DEPEND=true
        eval `./otp_build env_win32 x64`
        ./otp_build configure
        if cat erts/CONF_INFO ||
            grep -v "Static linking with OpenSSL 3.0" lib/*/CONF_INFO ||
            cat lib/*/SKIP ||
            cat lib/SKIP-APPLICATIONS; then
            exit 1
        fi
        ./otp_build boot -a
        ./otp_build release -a
        cp /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}/3rdparty/webview2/runtimes/win-x64/native/WebView2Loader.dll $ERL_TOP/release/win32/erts-*/bin/
        ./otp_build installer_win32
        export NAME=`ls release/win32/otp*.exe`
        cp $NAME /mnt/c/opt/otp.exe

    - name: Run Erlang installer
      shell: cmd
      run: C:\\opt\\otp.exe /S

    # TODO: INSTALL ERLANG + ELIXIR
    - name: "Install msys2"
      uses: msys2/setup-msys2@v2
      with:
          install: pacman-mirrors pkg-config base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-go upx mingw-w64-x86_64-dlfcn unzip git tar
          update: false

    - name: Locate Erlang
      shell: msys2 {0}
      run: |
        find /mnt/c/Program\ Files -type d -name "erts-*" -not -path "*lib*" >> "$GITHUB_PATH"
        mkdir $HOME/elixir && cd $HOME/elixir
        wget https://github.com/elixir-lang/elixir/releases/download/v${{ env.ELIXIR_VERSION }}/Precompiled.zip
        unzip Precompiled.zip
        echo "$HOME/elixir/bin" >> "$GITHUB_PATH"
    
    - uses: actions/checkout@v1
    - name: "Compile and Lint"
      shell: msys2 {0}
      run: |
        mix local.hex --force
        mix local.rebar --force
        mix deps.get
        mix lint

    - name: "Build Release"
      shell: msys2 {0}
      run: |
        mix assets.deploy
        mix desktop.installer

    - name: Archive Installer
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Installer
        path: _build/prod/*.exe

  linux:
    runs-on: ubuntu-20.04
    steps:

    - name: "Installing wxWidgets"
      run: |
        sudo apt install libssl-dev libjpeg-dev libpng-dev libtiff-dev zlib1g-dev libncurses5-dev libssh-dev unixodbc-dev libgmp3-dev libwebkit2gtk-4.0-dev libsctp-dev libgtk-3-dev libnotify-dev libsecret-1-dev catch mesa-common-dev libglu1-mesa-dev freeglut3-dev

        mkdir ~/projects && cd ~/projects
        git clone https://github.com/wxWidgets/wxWidgets.git
        cd wxWidgets; 
        git checkout v${{ env.WXWIDGETS_VERSION }} --recurse-submodules
        git submodule update --init
        ./configure --prefix=/usr/local/wxWidgets --enable-clipboard --enable-controls \
              --enable-dataviewctrl --enable-display \
              --enable-dnd --enable-graphics_ctx \
              --enable-std_string --enable-svg \
              --enable-unicode --enable-webview \
              --with-expat --with-libjpeg \
              --with-libpng --with-libtiff \
              --with-opengl --with-zlib \
              --disable-precomp-headers --disable-monolithic
        make -j2

    # Install general deps
    - name: "Installing Erlang"
      run: |
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf
        . $HOME/.asdf/asdf.sh
        asdf plugin add erlang
        asdf plugin add elixir
        echo "erlang ${{ env.OTP_VERSION }}" >> .tool-versions
        echo "elixir ${{ env.ELIXIR_VERSION }}-otp-25" >> .tool-versions
        export KERL_CONFIGURE_OPTIONS="--with-wxdir=$HOME/projects/wxWidgets"
        asdf install

    - uses: actions/checkout@v1
    - name: "Compile and Lint"
      run: |
        . $HOME/.asdf/asdf.sh
        mix local.hex --force
        mix local.rebar --force
        mix deps.get
        mix lint

    - name: "Build Release"
      run: |
        . $HOME/.asdf/asdf.sh
        mix assets.deploy
        mix desktop.installer

    - name: Archive Linux Installer
      uses: actions/upload-artifact@v2
      with:
        name: Linux-Installer
        path: _build/prod/*.run

  macos:
    runs-on: macos-11
    steps:
    # Install general deps
    - name: "Install brew deps"
      run: |
          brew install binutils coreutils wget wxwidgets

    - name: "Installing wxWidgets"
      run: |
        mkdir ~/projects && cd ~/projects
        git clone https://github.com/wxWidgets/wxWidgets.git
        cd wxWidgets; 
        git checkout v${{ env.WXWIDGETS_VERSION }} --recurse-submodules
        git submodule update --init
        ./configure --prefix=/usr/local/wxWidgets --enable-clipboard --enable-controls \
              --enable-dataviewctrl --enable-display \
              --enable-dnd --enable-graphics_ctx \
              --enable-std_string --enable-svg \
              --enable-unicode --enable-webview \
              --with-expat --with-libjpeg \
              --with-libpng --with-libtiff \
              --with-opengl --with-zlib \
              --disable-precomp-headers --disable-monolithic
        make -j2

    - name: "Installing Erlang"
      run: |
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf
        . $HOME/.asdf/asdf.sh
        asdf plugin add erlang
        asdf plugin add elixir
        echo "erlang ${{ env.OTP_VERSION }}" >> .tool-versions
        echo "elixir ${{ env.ELIXIR_VERSION }}-otp-25" >> .tool-versions
        export KERL_CONFIGURE_OPTIONS="--with-wxdir=$HOME/projects/wxWidgets --disable-jit"
        asdf install
    
    - uses: actions/checkout@v1
    - name: "Compile and Lint"
      run: |
        . $HOME/.asdf/asdf.sh
        mix local.hex --force
        mix local.rebar --force
        mix deps.get
        mix lint

    - name: "Build Release"
      run: |
        . $HOME/.asdf/asdf.sh
        export LD_LIBRARY_PATH="$HOME/projects/wxWidgets/lib/"
        mix assets.deploy
        mix desktop.installer

    - name: Archive MacOS Installer
      uses: actions/upload-artifact@v2
      with:
        name: MacOS-Installer
        path: _build/prod/*.dmg

  build-gh:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: whoan/docker-build-with-cache-action@master
      with:
        username: dominicletz
        password: "${{ secrets.GITHUB_TOKEN }}"  # you don't need to manually set this secret. GitHub does it on your behalf
        registry: docker.pkg.github.com
        image_name: linux_installer